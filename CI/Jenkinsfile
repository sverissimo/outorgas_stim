pipeline {
    agent any
    environment {        
        String SCRIPTS_FOLDER = pwd()
        String ENV_FOLDER = "C:\\Jenkins\\jobs_env_vars\\outorgas"
        String PY_REL_PATH = "venv\\Scripts\\python.exe"
        String PYTEST_REL_PATH = "venv\\Scripts\\pytest.exe"
        APP_FOLDER = null
        ENV_FILE = null
        python = null
        pytest = null
    }    

    stages {
        stage('#### Preparation ####') {
             steps {                                
                echo "${env.scriptsFolder}"
                script {                                   
                    ENV_FILE = readFile("${ENV_FOLDER}\\.env") //Utilizado pela função groovyScripts.getDotEnvValue()
                    
                    def groovyFilePath = env.BRANCH_NAME ? "${SCRIPTS_FOLDER}\\CI\\scripts.groovy" : "C:\\Users\\m1107819\\Coding\\outorgas\\CI\\scripts.groovy"                    
                    groovyScripts = load groovyFilePath                    
                    APP_FOLDER =  groovyScripts.getDotEnvValue('APP_FOLDER')                        
                    
                    python = "${APP_FOLDER}\\${PY_REL_PATH}"                    
                    pytest = "${APP_FOLDER}\\${PYTEST_REL_PATH}"
                    
                    println "*** App folder is ---> ${APP_FOLDER}"
                    println "*** Current branch is ---> ${env.BRANCH_NAME}"
                }                
            }
        }
        stage('#### Build ####') {
            when{
               expression {
                    env.BRANCH_NAME == 'frontend' | env.BRANCH_NAME == 'main'
                }
            }
            steps {
                script {
                    if (env.BRANCH_NAME == 'main'){
                        echo 'Build step: BACKEND -> Updating files and installing dependencies listed in requirements.txt...'
                        bat """
                        cd ${APP_FOLDER}\\venv\\Scripts 
                        activate && cd ..\\.. && cd && git pull
                        """  
                        
                        bat """
                        cd ${APP_FOLDER}\\venv\\Scripts 
                        activate && pip install -r ..\\..\\requirements.txt
                        """
                    } else {
                        echo 'Build step: FRONTEND -> Updating files and installing dependencies listed in package.json...'
                        bat """
                        cd ${APP_FOLDER}\\frontend
                        git pull
                        """
                        
                        bat """
                        cd ${APP_FOLDER}\\frontend
                        npm i --legacy-peer-deps && npm run build
                        """                    
                    }
                }
            }                        
        }        
        stage('#### Test ####') {
            when{
               expression {
                    true | env.BRANCH_NAME == 'main'
                }
            }
            steps {                
                bat """
                ${python} --version
                cd ${APP_FOLDER}\\venv\\Scripts 
                activate && cd ..\\.. && ${pytest} ./src/tests/unit/
                """                                
            }
        } 
        stage('#### Deploy ####') {
            when{
               expression {
                    true | env.BRANCH_NAME == 'main'
                }
            }
            steps {                                             
                bat """
                cd ${APP_FOLDER}\\venv\\Scripts 
                activate && cd ..\\.. && pm2 restart outorgas_server
                """
                //activate && cd ..\\.. && pm2 restart ${APP_FOLDER}\\src\\server.py --name outorgas --interpreter ${APP_FOLDER}\\venv\\Scripts\\python.exe
            }
        }   
    }
    
     post{
        success {
            echo '++++++++ Alright, pipeline runned sucessfully.'            
        }
        failure {
            echo '-------- Somehting went wrong running Jenkins jobs...'            
        }
    }
}